package blocks

import (
	"github.com/ainsleydev/sclark.uk/types"
	"github.com/ainsleydev/webkit/pkg/adapters/payload"
	"github.com/ainsleydev/webkit/pkg/markup"
	"github.com/ainsleydev/webkit/pkg/util/ptr"
	"strconv"
)

type LogosOptions struct {
	IsHero    bool
	Greyscale bool
}

func logosLoadingAttr(isHero bool) string {
	if isHero {
		return "eager"
	}
	return "lazy"
}

templ Logos(props types.BlockLogos, isHero bool) {
	if !isHero {
		<section class="logos-section">
			<div class="container">
				<div class="row">
					<div class="col-12">
						@logosBlock(props, isHero)
					</div><!-- /Col -->
				</div><!-- /Row -->
			</div><!-- /Container -->
		</section>
	} else {
		@logosBlock(props, isHero)
	}
}

func getLogoAttributes(idx int, isHero bool) []markup.ImageOptions {
	opts := []markup.ImageOptions{}
	if isHero {
		opts = append(opts, markup.ImageWithEagerLoading())
		return opts
	}
	opts = append(opts, markup.ImageWithLazyLoading())
	opts = append(opts, markup.ImageWithAttribute("data-aos", "fade"))
	opts = append(opts, markup.ImageWithAttribute("data-aos-delay", strconv.Itoa(idx*50)))
	return opts
}

templ logoImage(idx int, img payload.Media, isHero bool) {
	@markup.Image(&img, getLogoAttributes(idx, isHero)...)
}

templ logosBlock(props types.BlockLogos, isHero bool) {
	if len(props.Clients) > 0 {
		<figure class={ "logos", templ.KV("logos-greyscale", ptr.Bool(props.Greyscale)), templ.KV("logos-hero", isHero) }>
			if props.Title != "" {
				<figcaption
					class="logos-title"
					if !isHero {
						data-aos="fade-up"
					}
				>
					<span class="heading-6">
						{ props.Title }
					</span>
				</figcaption>
			}
			for idx, item := range props.Clients {
				if item.Url != "" {
					<a
						href={ templ.SafeURL(item.Url) }
						class="logos-item logos-link"
						target="_blank"
						aria-label={ item.Logo.Alt("S.Clark Client Logo") }
					>
						@logoImage(idx, item.Logo, isHero)
					</a>
				} else {
					<figure class="logos-item">
						@logoImage(idx, item.Logo, isHero)
					</figure>
				}
			}
		</figure>
	}
}
