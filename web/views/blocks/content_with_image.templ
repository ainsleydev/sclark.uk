package blocks

import (
	"log/slog"
	"github.com/ainsleydev/sclark.uk/types"
	"github.com/ainsleydev/webkit/pkg/adapters/payload"
	"github.com/ainsleydev/sclark.uk/views/components"
	"github.com/ainsleydev/webkit/pkg/util/ptr"
	"github.com/ainsleydev/webkit/pkg/markup"
)

func decodeRichText(block payload.Block) string {
	type Richtext struct {
		HTML string `json:"contentHtml"`
	}
	var r Richtext
	if err := block.Decode(&r); err != nil {
		slog.Error("Error decoding rich text: " + err.Error())
	}
	return r.HTML
}

func decodeFAQs(block payload.Block) types.BlockFAQs {
	var b types.BlockFAQs
	if err := block.Decode(&b); err != nil {
		slog.Error("Error decoding FAQs: " + err.Error())
	}
	return b
}

templ ContentWithImage(props types.BlockContentWithImage) {
	{{ id := getID(props.Identifier) }}
	<section class="section" id={ id }>
		<div class="container content-with-image">
			<div class="row justify-content-center justify-content-desk-between">
				<!-- Image -->
				<div class={ "col-12 col-tab-10 col-desk-6 col-desk-large-5",
					templ.KV("order-desk-last", props.ImagePosition == "right") }
					data-aos="fade-in"
					data-aos-anchor={ "#" + id }
					data-aos-offset="200"
				>
					if props.Image.URL != "" {
						{{ sticky := "" }}
						{{ if ptr.Bool(props.Sticky) == true { sticky = "content-image-sticky" } }}

						@markup.Picture(&props.Image,
							markup.PictureWithClasses("content-image", sticky),
							markup.PictureWithLazyLoading(),
						)
					}
				</div><!-- /Col -->
				<!-- Content -->
				<div class="col-12 col-tab-10 col-desk-5"
					data-aos="fade-up"
					data-aos-anchor={ "#" + id }
					data-aos-offset="200"
				>
					if len(props.TextLayout) > 0 {
						for index, block := range props.TextLayout {
							{{ margin := "" }}
							if index == len(props.TextLayout) - 1 {
								{{ margin = "mb-0" }}
							}
							@components.Group(margin) {
								switch block.BlockType {
									case "content-block":
										<div class="richtext">
											@templ.Raw(decodeRichText(block))
										</div>
									case "faqs-block":
										<h3>FAQS</h3>
										@components.Collapse(FAQsToCollapse(decodeFAQs(block)))
								}
							}
						}
					}
				</div><!-- /Col -->
			</div><!-- /Row -->
		</div><!-- /Container -->
	</section>
}
