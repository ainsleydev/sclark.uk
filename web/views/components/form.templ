package components

import (
	"fmt"
	"strings"
	"github.com/ainsleydev/webkit/pkg/adapters/payload"
	"github.com/ainsleydev/webkit/pkg/util/ptr"
	"github.com/go-ozzo/ozzo-validation"
)

type FormProps struct {
	Form payload.Form
	Errors validation.Errors
	Success bool
}

func hasFormError(errors validation.Errors, name string) (bool, string) {
	if errors == nil {
		return false, ""
	}
	msg, ok := errors[name]
	if !ok {
		return false, ""
	}
	return true, fmt.Sprintf("%s %s", strings.Title(strings.ToLower(name)), msg)
}

templ Form(props FormProps) {
	<form class="form" hx-post="/contact/" hx-swap="outerHTML" hx-indicator=".btn">
		if props.Success {
			<h4>Thanks for your message.</h4>
			<p class="mb-0">We will get back to you shortly.</p>
		} else {
			@Group() {
				<h4>Get in touch</h4>
				<p>Fill out the quick form below and we will get back in touch.</p>
			}
			for _, field := range props.Form.Fields {
				{{ hasErr, errMsg := hasFormError(props.Errors, field.Name) }}
				<div class={"form-group", templ.KV("form-group-error", hasErr)}>
					<label class="form-label" for={ field.ID }>
						{ field.Label }
						if ptr.Bool(field.Required) {
							<span class="form-input-required">*</span>
						}
					</label>
					@field
					if hasErr {
						<small class="form-error">{ errMsg }</small>
					}
				</div>
			}
			@Button(ButtonProps{
				Text: props.Form.ButtonLabel("Get In Touch"),
				Filled: true,
				Block: true,
			})
		}
	</form>
}
