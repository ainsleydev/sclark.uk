package pages

import (
	"context"
	"fmt"
	"io"
	"log/slog"
	"strings"
	//"encoding/json"

	"github.com/ainsleydev/sclark.uk/types"
	"github.com/ainsleydev/sclark.uk/views/blocks"
	"github.com/ainsleydev/sclark.uk/views/components"
	"github.com/ainsleydev/sclark.uk/views/layouts"
	"github.com/ainsleydev/webkit/pkg/adapters/payload"
)

type BlockHandlerFunc func(payload.Block) templ.Component

var blockHandlers = map[string]BlockHandlerFunc{
	"content-block": func(block payload.Block) templ.Component {
		b := types.BlockContentDefault{}
		mustDecodeBlock(block, &b, "content-block")
		return blocks.Content(b)
	},
	"content-with-image-block": func(block payload.Block) templ.Component {
		b := types.BlockContentWithImage{}
		mustDecodeBlock(block, &b, "content-with-image-block")
		return blocks.ContentWithImage(b)
	},
	"gradient-block": func(block payload.Block) templ.Component {
		b := types.BlockGradient{}
		mustDecodeBlock(block, &b, "gradient-block")
		colour := components.GradientColourPink
		if b.Colour == "blue" {
			colour = components.GradientColourBlue
		}
		return components.Gradient(colour, blocks.GetID(b.Identifier))
	},
	"logos-block": func(block payload.Block) templ.Component {
		b := types.BlockLogos{}
		mustDecodeBlock(block, &b, "logos-block")
		return blocks.Logos(b, false)
	},
	"reviews-block": func(block payload.Block) templ.Component {
		b := types.BlockReviews{}
		mustDecodeBlock(block, &b, "reviews-block")
		return blocks.Reviews(b)
	},
	"portfolio-block": func(block payload.Block) templ.Component {
		b := types.BlockPortfolio{}
		mustDecodeBlock(block, &b, "portfolio-block")
		return blocks.Portfolio(b)
	},
	"contact-block": func(block payload.Block) templ.Component {
		b := types.BlockContact{}
		mustDecodeBlock(block, &b, "contact-block")
		return blocks.Contact(b)
	},
}

func mustDecodeBlock(block payload.Block, v any, name string) {
	if err := block.Decode(v); err != nil {
		slog.Error("Decoding Block: "+err.Error(), "block", name)
	}
}

func getBlock(block payload.Block) templ.Component {
	if handler, found := blockHandlers[block.BlockType]; found {
		return handler(block)
	}
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
		_, err := io.WriteString(w, "Unknown block type: "+block.BlockType)
		return err
	})
}

templ Blocks(page types.Pages) {
	@layouts.Base() {
		@blocks.Hero(page.Hero)
		<div class="blocks">
			for _, block := range page.Layout {
				<div
					class={ "blocks-item",
					fmt.Sprintf("blocks-item-%s", strings.ReplaceAll(block.BlockType, "-block", "")) }
					data-payload-block-id={ fmt.Sprintf("block-%v", block.ID) }
				>
					@getBlock(block)
				</div>
			}
		</div>
	}
}
